#coding=utf-8  
import sys
import time
from naoqi import ALProxy
from vision_v3 import FindBall
#在过程中需要调用我们之前写的视觉模块，而在这里需要修改的是z方向的偏移
from math import pi,sin,cos,asin,acos,atan2,sqrt,sinh

#机器人的参数设定
ThighLength = 100.0
TibiaLength = 102.90
HipHeight = -200
HipOffsetY = 65
AnkleHeight = 10
StepLength = 20
dh = 30
LArm=105.0
LElbow=113.7


#使用手部逆运动学，计算出达到指定的世界空间坐标系下，各个关节角的旋转大小
def get_armAnglesRight(x,y,z):
    angle=[0,0,0,0]
    D2=x*x+y*y+z*z
    angle[0]=0
    angle[3]=acos((LArm*LArm+LElbow*LElbow-D2)/(2*LArm*LElbow))-pi
    angle[2]=-asin(z/(LElbow*sin(angle[3])))
    a=-LElbow*cos(angle[2])*sin(angle[3])
    b=LElbow*cos(angle[3])+LArm
    e=a*a+b*b
    angle[1]=atan2((a*x+b*y)/e,(b*x-a*y)/e)
    angle[2]=-angle[2]
    return angle

#如果要到达在空间中相互对称的空间坐标，那么就应该将各个关节角取反，以此得到空间中对称的双手运动轨迹
#由此可以写出对于左手的手部逆运动学
def get_armAnglesLeft(x,y,z):
    angle=[0,0,0,0]
    D2=x*x+y*y+z*z
    angle[0]=0
    angle[3]=-acos((LArm*LArm+LElbow*LElbow-D2)/(2*LArm*LElbow))+pi
    angle_temp3=acos((LArm*LArm+LElbow*LElbow-D2)/(2*LArm*LElbow))-pi
    angle[2]=asin(z/(LElbow*sin(angle_temp3)))
    angle_temp2 = -angle[2]
    a=-LElbow*cos(angle_temp2)*sin(angle_temp3)
    b=LElbow*cos(angle_temp3)+LArm
    e=a*a+b*b
    angle[1]=-atan2((a*x+b*y)/e,(b*x-a*y)/e)
    angle[2]=-angle[2]
    return angle

#由计算出来的各个关节角度，可以调用函数angleInterpolation得到右手的控制轨迹
def reachItRight(x,y,z):
    angleLists=[range(2) for i in range(4)]
    ang = get_armAnglesRight(x/2,y/2,z/2)
    angleLists[0][0] = -ang[0]
    angleLists[1][0] = -ang[1]
    angleLists[2][0] = -ang[2]
    angleLists[3][0] = -ang[3]
    ang = get_armAnglesRight(x,y,z)
    angleLists[0][1] = -ang[0]
    angleLists[1][1] = -ang[1]
    angleLists[2][1] = -ang[2]
    angleLists[3][1] = -ang[3]
    names  = ["RShoulderPitch","RShoulderRoll","RElbowYaw","RElbowRoll"]
    timeLists = [[2, 4] for i in range(len(names))]
    motionProxy.angleInterpolation(names, angleLists, timeLists, True)
    print "Right Position reached!"

#由计算出来的各个关节角度，可以调用函数angleInterpolation得到左手的控制轨迹
def reachItLeft(x,y,z):
    angleLists=[range(2) for i in range(4)]
    ang = get_armAnglesLeft(x/2,y/2,z/2)
    angleLists[0][0] = -ang[0]
    angleLists[1][0] = -ang[1]
    angleLists[2][0] = -ang[2]
    angleLists[3][0] = -ang[3]
    ang = get_armAnglesLeft(x/2,y/2,z/2)
    angleLists[0][1] = -ang[0]
    angleLists[1][1] = -ang[1]
    angleLists[2][1] = -ang[2]
    angleLists[3][1] = -ang[3]
    names  = ["LShoulderPitch","LShoulderRoll","LElbowYaw","LElbowRoll"]
    timeLists = [[2, 4] for i in range(len(names))]
    motionProxy.angleInterpolation(names, angleLists, timeLists, True)
    print "Left Position reached!"

#利用右手的手指去抓取小球
def catchItRight():
    names = ["RHand"]
    angle = [0.4]
    motionProxy.setAngles(names, angle, 0.2)

#张开手，释放小球
def releaseIt():
    names = ["RHand"]
    angle = [0.9]
    motionProxy.setAngles(names, angle, 0.8)


if __name__ == "__main__":
    robotIP = "169.254.81.2"
    #robotIP = "169.254.35.233"
    #robotIP = "10.180.170.68"
    PORT = 9559
    try:
        postureProxy = ALProxy("ALRobotPosture", robotIP, PORT)
    except Exception, e:
        print "Could not create proxy to ALRobotPosture"
        print "Error was: ", e

    postureProxy.goToPosture("StandInit", 0.5)
        
    try:
        motionProxy = ALProxy("ALMotion", robotIP, PORT)
        speechProxy = ALProxy("ALTextToSpeech", robotIP, PORT)
    except Exception,e:
        print "Could not create proxy to ALMotion"
        print "Error was: ",e
        sys.exit(1)

    #手首先伸直，这样可以更好地进行运动
    names=['RShoulderPitch', 'RShoulderRoll', 'RElbowRoll', 'RElbowYaw',
           'LShoulderPitch', 'LShoulderRoll', 'LElbowRoll', 'LElbowYaw'];
    angleLists=[[0],[0],[0],[0],[0],[0],[0],[0]];
    timeLists=[[1],[1],[1],[1],[1],[1],[1],[1]];
    isAbsolute  = True
    motionProxy.angleInterpolation(names, angleLists, timeLists, isAbsolute)
    
    #识别小球的位置,在合适的高度进行小球的识别
    #在这里由于调试时摄像头的缘故，在这里我们直接指定了Z方向的高度，而计算由摄像头得到的X，Y的坐标
    [X,Y]=FindBall(robotIP)
    Z = 45

    #右手伸出，先到达小球所在的位置，并且抓取
    speechProxy.say("Please give me the ball!")
    reachItRight(X,Y,Z)
    time.sleep(2);
    catchItRight()

    #左手在这里起到固定和推小球到右手里去，经验证，这样可以提高抓取的成功率
    reachItLeft (X,Y-35,Z)
    time.sleep(2);

    
    #在抓住小球之后，使用我们已经设计好的腿部逆运动学代码，可以直接走到指定的目标位置点，放置小球
    names  = ['LHipYawPitch' , 'LHipPitch', 'LHipRoll', 'LKneePitch', 'LAnkleRoll',
              'LAnklePitch','RHipYawPitch' , 'RHipPitch', 'RHipRoll', 'RKneePitch',
              'RAnkleRoll', 'RAnklePitch']
    names_Arm  = ['LShoulderPitch' , 'LShoulderRoll' , 'LElbowYaw' , 'LElbowRoll' , 'LWristYaw' , 'LHand' ,
                  'RShoulderPitch' , 'RShoulderRoll' , 'RElbowYaw' , 'RElbowRoll' , 'RWristYaw' , 'RHand']
    names_Head = ['HeadPitch','HeadYaw']
    angleLists_zero=[[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0],[0]];	
    timeLists_one=[[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1]];
    isAbsolute  = True

    # 详细的参数如下，这里是针对手部的参数，与之前的腿部逆运动学一样
    HP = [-0.349065844,-0.174532922] 
    HY = [0,0]  
    n=len(HP)
    angleLists_Head_s = [ HP[0:n],HY[0:n] ]
    LSP =[1.532399057]
    LSR =[0.109955741]
    LEY =[-1.202531834]
    LER =[-0.394444404]
    LWY =[0.069813169]
    LH  =[0.005235988]
    RSP =[1.52541774]
    RSR =[-0.101229095]
    REY =[1.158898604]
    RER =[0.390953746]
    RWY =[0.139626338]
    RH  =[0.005410521]
    n=len(LSP)
    angleLists_Arm_s  = [LSP[0:n],LSR[0:n],LEY[0:n],LER[0:n],LWY[0:n],LH[0:n],
                          RSP[0:n],RSR[0:n],REY[0:n],RER[0:n],RWY[0:n],RH[0:n]]
        
    #同理，需要对腿部的参数也进行设置
    LHYP=[-0.172787593]
    LHR= [0.115191729]
    LHP= [0.13439035]
    LKP= [-0.09075712]
    LAP= [0.095993107]
    LAR= [-0.116937058]
    RHYP=[-0.172787593]
    RHR= [-0.064577181]
    RHP= [0.132645021]
    RKP= [-0.092502449]
    RAP= [0.101229095]
    RAR= [0.073303827]
    n=len(LHR)
    angleLists_Leg_s  = [LHYP[0:n],LHP[0:n],LHR[0:n],LKP[0:n],LAR[0:n],LAP[0:n],
                          RHYP[0:n],RHP[0:n],RHR[0:n],RKP[0:n],RAR[0:n],RAP[0:n]]



    # 使用matlab的仿真程序，并且依照我们解出来的方程结果，将进行踢球的动作的各个关节的参数输入，之后只需要调用即可
    RHYP= [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    RHR=  [-0.026604, -0.05462, -0.084118, -0.11516, -0.14781, -0.18212, -0.21813, -0.25587, -0.29536,
           -0.33658, -0.35984, -0.35984, -0.35984, -0.35984, -0.35984, -0.35984, -0.35984, -0.35984,
           -0.35984, -0.35984, -0.3133, -0.26934, -0.22791, -0.18892, -0.15228, -0.11786, -0.085554,
           -0.055223, -0.026746, -7.6176e-18]
    RHP=  [-0.39191, -0.45148, -0.50292, -0.5484, -0.58913, -0.6259, -0.65922, -0.68942, -0.71676,
           -0.74137, -0.86502, -0.91615, -0.96338, -1.0064, -1.0449, -1.0787, -1.1075, -1.1311,
           -1.1493, -1.1618, -1.1084, -1.0479, -0.98079, -0.90763, -0.82869, -0.74396, -0.65295,
           -0.5544, -0.44556, -0.31996]
    RKP=  [0.7722, 0.88933, 0.99041, 1.0797, 1.1595, 1.2316, 1.2968, 1.3558, 1.4092, 1.4572, 1.5884,
           1.5791, 1.5635, 1.5417, 1.5137, 1.4794, 1.4387, 1.3915, 1.3375, 1.2763, 1.2793, 1.2697,
           1.2472, 1.2117, 1.1624, 1.0985, 1.0182, 0.9185, 0.79361, 0.63059]
    RAP=  [-0.38029, -0.43786, -0.48749, -0.53127, -0.57041, -0.60568, -0.63756, -0.66641, -0.69245,
           -0.71586, -0.72337, -0.66291, -0.60013, -0.53533, -0.46878, -0.40068, -0.33119, -0.26037,
           -0.18817, -0.11446, -0.1709, -0.2218, -0.26644, -0.30403, -0.33371, -0.35452, -0.36524,
           -0.3641, -0.34806, -0.31064]
    RAR=  [0.026604, 0.05462, 0.084118, 0.11516, 0.14781, 0.18212, 0.21813, 0.25587, 0.29536, 0.33658,
           0.35984, 0.35984, 0.35984, 0.35984, 0.35984, 0.35984, 0.35984, 0.35984, 0.35984, 0.35984,
           0.3133, 0.26934, 0.22791, 0.18892, 0.15228, 0.11786, 0.085554, 0.055223, 0.026746, 7.6176e-18]
    LHYP= [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    LHR=  [-0.13227, -0.13584, -0.13961, -0.1436, -0.14781, -0.15228, -0.15702, -0.16207, -0.16745, -0.17319,
           -0.17319, -0.17319, -0.17319, -0.17319, -0.17319, -0.17319, -0.17319, -0.17319, -0.17319, -0.17319,
           -0.15097, -0.13007, -0.11038, -0.091822, -0.074312, -0.057773, -0.042134, -0.027331, -0.013304,
           2.4578e-17]
    LHP=  [-0.37019, -0.43453, -0.491, -0.54206, -0.58913, -0.63312, -0.67464, -0.71413, -0.75192, -0.78827,
           -0.78827, -0.78827, -0.78827, -0.78827, -0.78827, -0.78827, -0.78827, -0.78827, -0.78827, -0.78827,
           -0.7549, -0.71981, -0.68279, -0.64357, -0.60175, -0.55679, -0.5079, -0.45386, -0.39258, -0.31996]
    LKP=  [0.72947, 0.85603, 0.96698, 1.0672, 1.1595, 1.2457, 1.3269, 1.4041, 1.4778, 1.5486, 1.5486, 1.5486,
           1.5486, 1.5486, 1.5486, 1.5486, 1.5486, 1.5486, 1.5486, 1.5486, 1.4836, 1.4152, 1.3429, 1.2662,
           1.1843, 1.0961, 1.0002, 0.89401, 0.77351, 0.63059]
    LAP=  [-0.35928, -0.42149, -0.47599, -0.52517, -0.57041, -0.61259, -0.6523, -0.68996, -0.72588, -0.76032,
           -0.76032, -0.76032, -0.76032, -0.76032, -0.76032, -0.76032, -0.76032, -0.76032, -0.76032, -0.76032,
           -0.7287, -0.69536, -0.66008, -0.62259, -0.58252, -0.53934, -0.49228, -0.44016, -0.38093, -0.31064]
    LAR=  [0.13227, 0.13584, 0.13961, 0.1436, 0.14781, 0.15228, 0.15702, 0.16207, 0.16745, 0.17319, 0.17319,
           0.17319, 0.17319, 0.17319, 0.17319, 0.17319, 0.17319, 0.17319, 0.17319, 0.17319, 0.15097, 0.13007,
           0.11038, 0.091822, 0.074312, 0.057773, 0.042134, 0.027331, 0.013304, -2.4578e-17]	
    n=len(LHR)    
    angleLists_tiqiu=[LHYP[0:n],LHP[0:n],LHR[0:n],LKP[0:n],LAR[0:n],LAP[0:n],RHYP[0:n],RHP[0:n],RHR[0:n],RKP[0:n],RAR[0:n],RAP[0:n]]


    # 我们采用的策略是应当以小的步伐前进，这样可以减小误差
    RHYP=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    RHR= [-0.15347, -0.15158, -0.14959, -0.1467, -0.14319, -0.14119, -0.13551, -0.13078, -0.12452, -0.11725, -0.027691, 0.012921,
          0.044182, 0.076275, 0.10434, 0.13341, 0.16009, 0.18509, 0.20887, 0.23162, 0.23367, 0.23629, 0.23832, 0.24073, 0.24265,
          0.24422, 0.24537, 0.24605, 0.24629, 0.24825, 0.12632, 0.074885, 0.03397, 0.00066937, -0.029905, -0.057493, -0.083441,
          -0.10747, -0.12988, -0.15183]
    RHP= [-0.27693, -0.35747, -0.4248, -0.48501, -0.54155, -0.59579, -0.64517, -0.6856, -0.70746, -0.69556, -0.71688, -0.69787,
          -0.67257, -0.64637, -0.61836, -0.59099, -0.56271, -0.53377, -0.50432, -0.47439, -0.45967, -0.44488, -0.42928, -0.41368,
          -0.39736, -0.38052, -0.36304, -0.34519, -0.32681, -0.30884, -0.35703, -0.3517, -0.33783, -0.31978, -0.2989, -0.27603,
          -0.25157, -0.22578, -0.19897, -0.17079]
    RKP= [1.1773, 1.2602, 1.3077, 1.3365, 1.3558, 1.3694, 1.3724, 1.3579, 1.3093, 1.2013, 1.2692, 1.2622, 1.243, 1.2217, 1.1964,
          1.1719, 1.145, 1.1164, 1.0863, 1.0547, 1.0539, 1.0529, 1.0503, 1.0476, 1.0435, 1.0382, 1.0315, 1.0239, 1.0151, 1.0071,
          1.1489, 1.1717, 1.175, 1.1686, 1.1552, 1.1369, 1.1145, 1.0887, 1.0599, 1.0278]
    RAP= [-0.9527, -0.95504, -0.93523, -0.9038, -0.86657, -0.82593, -0.77962, -0.7247, -0.65423, -0.55808, -0.60472, -0.61671,
          -0.62281, -0.62768, -0.63037, -0.63322, -0.6347, -0.63503, -0.63435, -0.63269, -0.64657, -0.66039, -0.67337, -0.6863,
          -0.69846, -0.70999, -0.72078, -0.73104, -0.74062, -0.75065, -0.84421, -0.87234, -0.88955, -0.90114, -0.90869, -0.91325,
          -0.91533, -0.91524, -0.91332, -0.90938]
    RAR= [0.18416, 0.1819, 0.1795, 0.17603, 0.17183, 0.16943, 0.16261, 0.15694, 0.14942, 0.1407, 0.033229, -0.015505, -0.053018,
          -0.09153, -0.12521, -0.1601, -0.19211, -0.22211, -0.25065, -0.27794, -0.2804, -0.28355, -0.28598, -0.28887, -0.29118,
          -0.29306, -0.29444, -0.29526, -0.29554, -0.2979, -0.15159, -0.089862, -0.040764, -0.00080324, 0.035886, 0.068991,
          0.10013, 0.12896, 0.15586, 0.18219]
    LHYP=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    LHR= [-0.24886, -0.25185, -0.25328, -0.25486, -0.25669, -0.25904, -0.26086, -0.26241, -0.26396, -0.26543, -0.14057, -0.088719,
          -0.048318, -0.013714, 0.016957, 0.044557, 0.070709, 0.095321, 0.11864, 0.14086, 0.13978, 0.13599, 0.13297, 0.1299, 0.12529,
          0.11936, 0.11149, 0.1036, 0.092794, 0.088001, -0.0072886, -0.045218, -0.076674, -0.10289, -0.13099, -0.15716, -0.17877,
          -0.20436, -0.22607, -0.24441]
    LHP= [-0.46734, -0.45228, -0.43619, -0.41983, -0.4032, -0.38641, -0.36908, -0.35133, -0.33323, -0.31478, -0.35918, -0.35287,
          -0.33844, -0.31987, -0.29863, -0.27543, -0.25073, -0.2248, -0.19774, -0.16962, -0.27529, -0.35536, -0.42228, -0.48214,
          -0.538, -0.59081, -0.63853, -0.67667, -0.69453, -0.68117, -0.71548, -0.70163, -0.68008, -0.6547, -0.62826, -0.60069,
          -0.5712, -0.54291, -0.51287, -0.48118]
    LKP= [1.0698, 1.0684, 1.0649, 1.0608, 1.056, 1.0509, 1.0447, 1.0374, 1.0294, 1.0205, 1.1539, 1.1745, 1.1765, 1.1688, 1.1546,
          1.1354, 1.1124, 1.0862, 1.0569, 1.0248, 1.1731, 1.2548, 1.3015, 1.3297, 1.3477, 1.3586, 1.3586, 1.3401, 1.2844, 1.1742,
          1.2666, 1.2694, 1.2575, 1.238, 1.2159, 1.1912, 1.1621, 1.135, 1.1038, 1.0687]
    LAP= [-0.61994, -0.63361, -0.64615, -0.65838, -0.67029, -0.68199, -0.69303, -0.70353, -0.71358, -0.72315, -0.81217, -0.83905,
          -0.85551, -0.86636, -0.87339, -0.87746, -0.87916, -0.87882, -0.87661, -0.87263, -0.91525, -0.91692, -0.89669, -0.86501,
          -0.8272, -0.78523, -0.73756, -0.68089, -0.60733, -0.51051, -0.56857, -0.58522, -0.5949, -0.60072, -0.60511, -0.60796,
          -0.60839, -0.60954, -0.60841, -0.60502]
    LAR= [0.29863, 0.30222, 0.30394, 0.30583, 0.30803, 0.31084, 0.31303, 0.31489, 0.31675, 0.31851, 0.16868, 0.10646, 0.057981,
          0.016456, -0.020349, -0.053469, -0.084851, -0.11439, -0.14237, -0.16904, -0.16774, -0.16319, -0.15957, -0.15588,
          -0.15035, -0.14323, -0.13379, -0.12432, -0.11135, -0.1056, 0.0087464, 0.054261, 0.092009, 0.12347, 0.15719, 0.1886,
          0.21452, 0.24524, 0.27129, 0.29329]
    n=len(LHR)
    angleLists_walk  = [LHYP[0:n],LHP[0:n],LHR[0:n],LKP[0:n],LAR[0:n],LAP[0:n],RHYP[0:n],RHP[0:n],RHR[0:n],RKP[0:n],RAR[0:n],RAP[0:n]]

    # 为保持机器人的稳定，需要我们将重心首先移动
    RHYP=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    RHR= [0.060263, 0.060475, 0.061036, 0.061624, 0.062338, 0.063108, 0.063901, 0.064792, 0.065763, 0.066652, 0.088605, 0.11054, 0.13247,
          0.15436, 0.17615, 0.19783, 0.21941, 0.24087, 0.26217, 0.28333, 0.28353, 0.28373, 0.28394, 0.28416, 0.28439, 0.28462, 0.28486,
          0.2851, 0.28535, 0.28561, 0.24418, 0.20098, 0.15713, 0.11272, 0.067866, 0.022682, -0.022705, -0.06808, -0.11332, -0.15831]
    RHP= [-0.21602, -0.27855, -0.33698, -0.39518, -0.44443, -0.4891, -0.53032, -0.56885, -0.60526, -0.63985, -0.63622, -0.63153, -0.62578,
          -0.61897, -0.61106, -0.60204, -0.59188, -0.58057, -0.56802, -0.55424, -0.53953, -0.52449, -0.50911, -0.4934, -0.47738, -0.46103,
          -0.44436, -0.42737, -0.41008, -0.39247, -0.32375, -0.32338, -0.31834, -0.30897, -0.29555, -0.27827, -0.25723, -0.23247, -0.20387, -0.17119]
    RKP= [0.43311, 0.55683, 0.67233, 0.78692, 0.88393, 0.97189, 1.053, 1.1288, 1.2004, 1.2683, 1.2612, 1.252, 1.2407, 1.2273, 1.2118, 1.194,
          1.1741, 1.1518, 1.1271, 1.1, 1.0995, 1.0984, 1.0965, 1.094, 1.0907, 1.0868, 1.0822, 1.0769, 1.0709, 1.0641, 1.0732, 1.1061, 1.1291,
          1.1428, 1.1471, 1.1424, 1.1284, 1.1051, 1.0721, 1.0288]
    RAP= [-0.23455, -0.29573, -0.3528, -0.40919, -0.45695, -0.50024, -0.54015, -0.57741, -0.61256, -0.64593, -0.64242, -0.6379, -0.63236,
          -0.62578, -0.61815, -0.60944, -0.59963, -0.5887, -0.57658, -0.56325, -0.57745, -0.59132, -0.60484, -0.618, -0.63081, -0.64324,
          -0.6553, -0.66697, -0.67825, -0.68912, -0.7669, -0.80016, -0.82826, -0.85124, -0.86905, -0.88157, -0.88866, -0.89012, -0.88572, -0.8751]
    RAR= [-0.072316, -0.07257, -0.073243, -0.073949, -0.074805, -0.07573, -0.076682, -0.077751, -0.078915, -0.079982, -0.10633, -0.13265,
          -0.15897, -0.18523, -0.21139, -0.2374, -0.26329, -0.28904, -0.31461, -0.34, -0.34023, -0.34047, -0.34073, -0.34099, -0.34126,
          -0.34154, -0.34183, -0.34212, -0.34242, -0.34273, -0.29302, -0.24118, -0.18856, -0.13527, -0.081439, -0.027219, 0.027245, 0.081696,
          0.13599, 0.18997]
    LHYP=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    LHR= [-0.060257, -0.060464, -0.061037, -0.061613, -0.062325, -0.063095, -0.063887, -0.064779, -0.065741, -0.066636, -0.044517,
          -0.022282, 3.1187e-09, 0.022282, 0.044517, 0.066636, 0.088572, 0.11048, 0.13242, 0.1543, 0.15732, 0.15872, 0.15915, 0.15914,
          0.15901, 0.15888, 0.15863, 0.15792, 0.15625, 0.15325, 0.10982, 0.066319, 0.02223, -0.022216, -0.066561, -0.11048, -0.15442,
          -0.1981, -0.24135, -0.28406]
    LHP= [-0.21996, -0.2825, -0.34098, -0.39951, -0.44883, -0.49358, -0.5349, -0.57355, -0.61004, -0.64475, -0.64734, -0.6489, -0.64941,
          -0.6489, -0.64734, -0.64475, -0.6411, -0.63639, -0.63062, -0.62378, -0.68839, -0.72634, -0.74984, -0.76663, -0.78126, -0.79526,
          -0.807, -0.8114, -0.79946, -0.75669, -0.70813, -0.70323, -0.69342, -0.67892, -0.65988, -0.63639, -0.60856, -0.57638, -0.53976, -0.49843]
    LKP= [0.43309, 0.55667, 0.6721, 0.78716, 0.88413, 0.97207, 1.0532, 1.129, 1.2005, 1.2685, 1.2735, 1.2766, 1.2776, 1.2766, 1.2735, 1.2685,
          1.2613, 1.2521, 1.2408, 1.2274, 1.3233, 1.3659, 1.3802, 1.3817, 1.3791, 1.3754, 1.3677, 1.3471, 1.298, 1.1948, 1.244, 1.2633, 1.2737,
          1.2753, 1.2681, 1.2521, 1.2271, 1.1929, 1.1491, 1.0949]
    LAP= [-0.23059, -0.29162, -0.34858, -0.4051, -0.45276, -0.49594, -0.53574, -0.5729, -0.60793, -0.64118, -0.64366, -0.64514, -0.64564, -0.64514,
          -0.64366, -0.64118, -0.63768, -0.63317, -0.62765, -0.6211, -0.65235, -0.657, -0.64781, -0.63248, -0.61528, -0.59761, -0.57817, -0.55316,
          -0.51596, -0.45555, -0.55335, -0.57756, -0.59775, -0.61385, -0.62572, -0.63317, -0.63602, -0.63401, -0.6268, -0.61397]
    LAR= [0.072309, 0.072557, 0.073244, 0.073935, 0.07479, 0.075714, 0.076665, 0.077735, 0.078889, 0.079963, 0.05342, 0.026738, -3.7424e-09,
          -0.026738, -0.05342, -0.079963, -0.10629, -0.13258, -0.1589, -0.18516, -0.18879, -0.19046, -0.19098, -0.19097, -0.19082, -0.19066,
          -0.19036, -0.18951, -0.1875, -0.1839, -0.13179, -0.079582, -0.026676, 0.026659, 0.079873, 0.13258, 0.18531, 0.23772, 0.28961, 0.34087]
    n=len(LHR)
    angleLists_walkstart  = [LHYP[0:n],LHP[0:n],LHR[0:n],LKP[0:n],LAR[0:n],LAP[0:n],RHYP[0:n],RHP[0:n],RHR[0:n],RKP[0:n],RAR[0:n],RAP[0:n]]


    # 这里是对Y方向进行调整，就是对水平方向进行调整的水平位移，先是向左移动
    RHYP=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    RHR= [-1.5496e-17, 2.3308e-17, -2.3935e-17, 2.9279e-17, 2.9094e-17, -2.082e-17, -2.9508e-18, -9.8384e-18, -9.5173e-18, -6.4006e-18, 0.030329,
          0.060602, 0.090764, 0.12076, 0.15054, 0.18006, 0.20926, 0.2381, 0.26654, 0.29455, 0.29455, 0.29455, 0.29455, 0.29455, 0.29455, 0.29455,
          0.29455, 0.29455, 0.29455, 0.29455, 0.22084, 0.14461, 0.066645, -0.012135, -0.090764, -0.16829, -0.24382, -0.31663, -0.38612, -0.45191,
          -0.45444, -0.45304, -0.44727, -0.4369, -0.42191, -0.40254, -0.37932, -0.35297, -0.32439, -0.29455, -0.26654, -0.2381, -0.20926, -0.18006,
          -0.15054, -0.12076, -0.090764, -0.060602, -0.030329, -1.2439e-15, 6.1212e-18, 5.6083e-18, 1.2481e-18, 1.0765e-18, -1.3742e-17, -1.3368e-17,
          1.3347e-17, -1.9576e-17, 1.9938e-17, 8.4309e-18]
    RHP= [-0.55077, -0.56043, -0.56995, -0.57934, -0.58859, -0.59772, -0.60673, -0.61562, -0.62441, -0.6331, -0.63244, -0.63048, -0.62719, -0.62258,
          -0.61664, -0.60934, -0.60066, -0.59057, -0.57903, -0.56599, -0.56599, -0.56599, -0.56599, -0.56599, -0.56599, -0.56599, -0.56599, -0.56599,
          -0.56599, -0.56599, -0.59679, -0.61793, -0.62992, -0.63299, -0.62719, -0.61242, -0.58838, -0.55445, -0.50947, -0.45116, -0.53495, -0.5954,
          -0.6387, -0.66774, -0.68391, -0.6877, -0.67898, -0.65701, -0.62027, -0.56599, -0.57903, -0.59057, -0.60066, -0.60934, -0.61664, -0.62258,
          -0.62719, -0.63048, -0.63244, -0.6331, -0.62441, -0.61562, -0.60673, -0.59772, -0.58859, -0.57934, -0.56995, -0.56043, -0.55077, -0.54095]
    RKP= [1.0843, 1.1033, 1.1219, 1.1403, 1.1585, 1.1764, 1.194, 1.2115, 1.2287, 1.2457, 1.2444, 1.2405, 1.2341, 1.2251, 1.2134, 1.1991, 1.1821,
          1.1624, 1.1397, 1.1142, 1.1142, 1.1142, 1.1142, 1.1142, 1.1142, 1.1142, 1.1142, 1.1142, 1.1142, 1.1142, 1.1746, 1.216, 1.2395, 1.2455,
          1.2341, 1.2052, 1.1581, 1.0915, 1.0033, 0.88871, 1.0533, 1.1718, 1.2566, 1.3135, 1.345, 1.3525, 1.3354, 1.2925, 1.2206, 1.1142, 1.1397,
          1.1624, 1.1821, 1.1991, 1.2134, 1.2251, 1.2341, 1.2405, 1.2444, 1.2457, 1.2287, 1.2115, 1.194, 1.1764, 1.1585, 1.1403, 1.1219, 1.1033,
          1.0843, 1.0651]
    RAP= [-0.53355, -0.54284, -0.55199, -0.56101, -0.56989, -0.57865, -0.5873, -0.59583, -0.60425, -0.61257, -0.61194, -0.61006, -0.60691, -0.6025,
          -0.5968, -0.5898, -0.58147, -0.57179, -0.56071, -0.54819, -0.54819, -0.54819, -0.54819, -0.54819, -0.54819, -0.54819, -0.54819, -0.54819,
          -0.54819, -0.54819, -0.57776, -0.59804, -0.60953, -0.61247, -0.60691, -0.59276, -0.56969, -0.53709, -0.49379, -0.43755, -0.51833, -0.57643,
          -0.61794, -0.64571, -0.66114, -0.66476, -0.65644, -0.63545, -0.60028, -0.54819, -0.56071, -0.57179, -0.58147, -0.5898, -0.5968, -0.6025,
          -0.60691, -0.61006, -0.61194, -0.61257, -0.60425, -0.59583, -0.5873, -0.57865, -0.56989, -0.56101, -0.55199, -0.54284, -0.53355, -0.5241]
    RAR= [1.5496e-17, -2.3308e-17, 2.3935e-17, -2.9279e-17, -2.9094e-17, 2.082e-17, 2.9508e-18, 9.8384e-18, 9.5173e-18, 6.4006e-18, -0.030329, -0.060602,
          -0.090764, -0.12076, -0.15054, -0.18006, -0.20926, -0.2381, -0.26654, -0.29455, -0.29455, -0.29455, -0.29455, -0.29455, -0.29455, -0.29455,
          -0.29455, -0.29455, -0.29455, -0.29455, -0.22084, -0.14461, -0.066645, 0.012135, 0.090764, 0.16829, 0.24382, 0.31663, 0.38612, 0.45191,
          0.45444, 0.45304, 0.44727, 0.4369, 0.42191, 0.40254, 0.37932, 0.35297, 0.32439, 0.29455, 0.26654, 0.2381, 0.20926, 0.18006, 0.15054,
          0.12076, 0.090764, 0.060602, 0.030329, 1.2439e-15, -6.1212e-18, -5.6083e-18, -1.2481e-18, -1.0765e-18, 1.3742e-17, 1.3368e-17,
          -1.3347e-17, 1.9576e-17, -1.9938e-17, -8.4309e-18]
    LHYP=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    LHR= [-1.5496e-17, 2.3308e-17, -2.3935e-17, 2.9279e-17, 2.9094e-17, -2.082e-17, -2.9508e-18, -9.8384e-18, -9.5173e-18, -6.4006e-18, 0.030329,
          0.060602, 0.090764, 0.12076, 0.15054, 0.18006, 0.20926, 0.2381, 0.26654, 0.29455, 0.32439, 0.35297, 0.37932, 0.40254, 0.42191, 0.4369,
          0.44727, 0.45304, 0.45444, 0.45191, 0.38612, 0.31663, 0.24382, 0.16829, 0.090764, 0.012135, -0.066645, -0.14461, -0.22084, -0.29455,
          -0.29455, -0.29455, -0.29455, -0.29455, -0.29455, -0.29455, -0.29455, -0.29455, -0.29455, -0.29455, -0.26654, -0.2381, -0.20926,
          -0.18006, -0.15054, -0.12076, -0.090764, -0.060602, -0.030329, -1.2723e-15, -3.0367e-17, -2.9263e-17, -1.9833e-17, 6.1084e-19,
          -2.8445e-17, -7.9643e-18, 1.8353e-17, 1.8143e-17, 1.7699e-17, -2.7964e-17]
    LHP= [-0.55077, -0.56043, -0.56995, -0.57934, -0.58859, -0.59772, -0.60673, -0.61562, -0.62441, -0.6331, -0.63244, -0.63048, -0.62719,
          -0.62258, -0.61664, -0.60934, -0.60066, -0.59057, -0.57903, -0.56599, -0.62027, -0.65701, -0.67898, -0.6877, -0.68391, -0.66774,
          -0.6387, -0.5954, -0.53495, -0.45116, -0.50947, -0.55445, -0.58838, -0.61242, -0.62719, -0.63299, -0.62992, -0.61793, -0.59679,
          -0.56599, -0.56599, -0.56599, -0.56599, -0.56599, -0.56599, -0.56599, -0.56599, -0.56599, -0.56599, -0.56599, -0.57903, -0.59057,
          -0.60066, -0.60934, -0.61664, -0.62258, -0.62719, -0.63048, -0.63244, -0.6331, -0.62441, -0.61562, -0.60673, -0.59772, -0.58859,
          -0.57934, -0.56995, -0.56043, -0.55077, -0.54095]
    LKP= [1.0843, 1.1033, 1.1219, 1.1403, 1.1585, 1.1764, 1.194, 1.2115, 1.2287, 1.2457, 1.2444, 1.2405, 1.2341, 1.2251, 1.2134, 1.1991, 1.1821,
          1.1624, 1.1397, 1.1142, 1.2206, 1.2925, 1.3354, 1.3525, 1.345, 1.3135, 1.2566, 1.1718, 1.0533, 0.88871, 1.0033, 1.0915, 1.1581, 1.2052,
          1.2341, 1.2455, 1.2395, 1.216, 1.1746, 1.1142, 1.1142, 1.1142, 1.1142, 1.1142, 1.1142, 1.1142, 1.1142, 1.1142, 1.1142, 1.1142, 1.1397,
          1.1624, 1.1821, 1.1991, 1.2134, 1.2251, 1.2341, 1.2405, 1.2444, 1.2457, 1.2287, 1.2115, 1.194, 1.1764, 1.1585, 1.1403, 1.1219, 1.1033,
          1.0843, 1.0651]
    LAP= [-0.53355, -0.54284, -0.55199, -0.56101, -0.56989, -0.57865, -0.5873, -0.59583, -0.60425, -0.61257, -0.61194, -0.61006, -0.60691, -0.6025,
          -0.5968, -0.5898, -0.58147, -0.57179, -0.56071, -0.54819, -0.60028, -0.63545, -0.65644, -0.66476, -0.66114, -0.64571, -0.61794, -0.57643,
          -0.51833, -0.43755, -0.49379, -0.53709, -0.56969, -0.59276, -0.60691, -0.61247, -0.60953, -0.59804, -0.57776, -0.54819, -0.54819, -0.54819,
          -0.54819, -0.54819, -0.54819, -0.54819, -0.54819, -0.54819, -0.54819, -0.54819, -0.56071, -0.57179, -0.58147, -0.5898, -0.5968, -0.6025,
          -0.60691, -0.61006, -0.61194, -0.61257, -0.60425, -0.59583, -0.5873, -0.57865, -0.56989, -0.56101, -0.55199, -0.54284, -0.53355, -0.5241]
    LAR= [1.5496e-17, -2.3308e-17, 2.3935e-17, -2.9279e-17, -2.9094e-17, 2.082e-17, 2.9508e-18, 9.8384e-18, 9.5173e-18, 6.4006e-18, -0.030329, -0.060602,
          -0.090764, -0.12076, -0.15054, -0.18006, -0.20926, -0.2381, -0.26654, -0.29455, -0.32439, -0.35297, -0.37932, -0.40254, -0.42191, -0.4369,
          -0.44727, -0.45304, -0.45444, -0.45191, -0.38612, -0.31663, -0.24382, -0.16829, -0.090764, -0.012135, 0.066645, 0.14461, 0.22084, 0.29455,
          0.29455, 0.29455, 0.29455, 0.29455, 0.29455, 0.29455, 0.29455, 0.29455, 0.29455, 0.29455, 0.26654, 0.2381, 0.20926, 0.18006, 0.15054,
          0.12076, 0.090764, 0.060602, 0.030329, 1.2723e-15, 3.0367e-17, 2.9263e-17, 1.9833e-17, -6.1084e-19, 2.8445e-17, 7.9643e-18, -1.8353e-17,
          -1.8143e-17, -1.7699e-17, 2.7964e-17]
    n=len(LHR)
    angleLists_left  = [LHYP[0:n],LHP[0:n],LHR[0:n],LKP[0:n],LAR[0:n],LAP[0:n],RHYP[0:n],RHP[0:n],RHR[0:n],RKP[0:n],RAR[0:n],RAP[0:n]]

    #之后这里是向右移动
    RHYP=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    RHR= [1.5496e-17, -2.3308e-17, 2.3935e-17, -2.9279e-17, -2.9094e-17, 2.082e-17, 2.9508e-18, 9.8384e-18, 9.5173e-18, 6.4006e-18, -0.030329,
          -0.060602, -0.090764, -0.12076, -0.15054, -0.18006, -0.20926, -0.2381, -0.26654, -0.29455, -0.32439, -0.35297, -0.37932, -0.40254,
          -0.42191, -0.4369, -0.44727, -0.45304, -0.45444, -0.45191, -0.38612, -0.31663, -0.24382, -0.16829, -0.090764, -0.012135, 0.066645,
          0.14461, 0.22084, 0.29455, 0.29455, 0.29455, 0.29455, 0.29455, 0.29455, 0.29455, 0.29455, 0.29455, 0.29455, 0.29455, 0.26654,
          0.2381, 0.20926, 0.18006, 0.15054, 0.12076, 0.090764, 0.060602, 0.030329, 1.2723e-15, 3.0367e-17, 2.9263e-17, 1.9833e-17,
          -6.1084e-19, 2.8445e-17, 7.9643e-18, -1.8353e-17, -1.8143e-17, -1.7699e-17, 2.7964e-17]
    RHP= [-0.55077, -0.56043, -0.56995, -0.57934, -0.58859, -0.59772, -0.60673, -0.61562, -0.62441, -0.6331, -0.63244, -0.63048, -0.62719,
          -0.62258, -0.61664, -0.60934, -0.60066, -0.59057, -0.57903, -0.56599, -0.62027, -0.65701, -0.67898, -0.6877, -0.68391, -0.66774,
          -0.6387, -0.5954, -0.53495, -0.45116, -0.50947, -0.55445, -0.58838, -0.61242, -0.62719, -0.63299, -0.62992, -0.61793, -0.59679,
          -0.56599, -0.56599, -0.56599, -0.56599, -0.56599, -0.56599, -0.56599, -0.56599, -0.56599, -0.56599, -0.56599, -0.57903, -0.59057,
          -0.60066, -0.60934, -0.61664, -0.62258, -0.62719, -0.63048, -0.63244, -0.6331, -0.62441, -0.61562, -0.60673, -0.59772, -0.58859,
          -0.57934, -0.56995, -0.56043, -0.55077, -0.54095]
    RKP= [1.0843, 1.1033, 1.1219, 1.1403, 1.1585, 1.1764, 1.194, 1.2115, 1.2287, 1.2457, 1.2444, 1.2405, 1.2341, 1.2251, 1.2134, 1.1991, 1.1821,
          1.1624, 1.1397, 1.1142, 1.2206, 1.2925, 1.3354, 1.3525, 1.345, 1.3135, 1.2566, 1.1718, 1.0533, 0.88871, 1.0033, 1.0915, 1.1581, 1.2052,
          1.2341, 1.2455, 1.2395, 1.216, 1.1746, 1.1142, 1.1142, 1.1142, 1.1142, 1.1142, 1.1142, 1.1142, 1.1142, 1.1142, 1.1142, 1.1142, 1.1397,
          1.1624, 1.1821, 1.1991, 1.2134, 1.2251, 1.2341, 1.2405, 1.2444, 1.2457, 1.2287, 1.2115, 1.194, 1.1764, 1.1585, 1.1403, 1.1219, 1.1033,
          1.0843, 1.0651]
    RAP= [-0.53355, -0.54284, -0.55199, -0.56101, -0.56989, -0.57865, -0.5873, -0.59583, -0.60425, -0.61257, -0.61194, -0.61006, -0.60691, -0.6025,
          -0.5968, -0.5898, -0.58147, -0.57179, -0.56071, -0.54819, -0.60028, -0.63545, -0.65644, -0.66476, -0.66114, -0.64571, -0.61794, -0.57643,
          -0.51833, -0.43755, -0.49379, -0.53709, -0.56969, -0.59276, -0.60691, -0.61247, -0.60953, -0.59804, -0.57776, -0.54819, -0.54819, -0.54819,
          -0.54819, -0.54819, -0.54819, -0.54819, -0.54819, -0.54819, -0.54819, -0.54819, -0.56071, -0.57179, -0.58147, -0.5898, -0.5968, -0.6025,
          -0.60691, -0.61006, -0.61194, -0.61257, -0.60425, -0.59583, -0.5873, -0.57865, -0.56989, -0.56101, -0.55199, -0.54284, -0.53355, -0.5241]
    RAR= [-1.5496e-17, 2.3308e-17, -2.3935e-17, 2.9279e-17, 2.9094e-17, -2.082e-17, -2.9508e-18, -9.8384e-18, -9.5173e-18, -6.4006e-18, 0.030329,
          0.060602, 0.090764, 0.12076, 0.15054, 0.18006, 0.20926, 0.2381, 0.26654, 0.29455, 0.32439, 0.35297, 0.37932, 0.40254, 0.42191, 0.4369,
          0.44727, 0.45304, 0.45444, 0.45191, 0.38612, 0.31663, 0.24382, 0.16829, 0.090764, 0.012135, -0.066645, -0.14461, -0.22084, -0.29455,
          -0.29455, -0.29455, -0.29455, -0.29455, -0.29455, -0.29455, -0.29455, -0.29455, -0.29455, -0.29455, -0.26654, -0.2381, -0.20926, -0.18006,
          -0.15054, -0.12076, -0.090764, -0.060602, -0.030329, -1.2723e-15, -3.0367e-17, -2.9263e-17, -1.9833e-17, 6.1084e-19, -2.8445e-17,
          -7.9643e-18, 1.8353e-17, 1.8143e-17, 1.7699e-17, -2.7964e-17]
    LHYP=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    LHR= [1.5496e-17, -2.3308e-17, 2.3935e-17, -2.9279e-17, -2.9094e-17, 2.082e-17, 2.9508e-18, 9.8384e-18, 9.5173e-18, 6.4006e-18, -0.030329,
          -0.060602, -0.090764, -0.12076, -0.15054, -0.18006, -0.20926, -0.2381, -0.26654, -0.29455, -0.29455, -0.29455, -0.29455, -0.29455,
          -0.29455, -0.29455, -0.29455, -0.29455, -0.29455, -0.29455, -0.22084, -0.14461, -0.066645, 0.012135, 0.090764, 0.16829, 0.24382,
          0.31663, 0.38612, 0.45191, 0.45444, 0.45304, 0.44727, 0.4369, 0.42191, 0.40254, 0.37932, 0.35297, 0.32439, 0.29455, 0.26654,
          0.2381, 0.20926, 0.18006, 0.15054, 0.12076, 0.090764, 0.060602, 0.030329, 1.2439e-15, -6.1212e-18, -5.6083e-18, -1.2481e-18,
          -1.0765e-18, 1.3742e-17, 1.3368e-17, -1.3347e-17, 1.9576e-17, -1.9938e-17, -8.4309e-18]
    LHP= [-0.55077, -0.56043, -0.56995, -0.57934, -0.58859, -0.59772, -0.60673, -0.61562, -0.62441, -0.6331, -0.63244, -0.63048, -0.62719,
          -0.62258, -0.61664, -0.60934, -0.60066, -0.59057, -0.57903, -0.56599, -0.56599, -0.56599, -0.56599, -0.56599, -0.56599, -0.56599,
          -0.56599, -0.56599, -0.56599, -0.56599, -0.59679, -0.61793, -0.62992, -0.63299, -0.62719, -0.61242, -0.58838, -0.55445, -0.50947,
          -0.45116, -0.53495, -0.5954, -0.6387, -0.66774, -0.68391, -0.6877, -0.67898, -0.65701, -0.62027, -0.56599, -0.57903, -0.59057,
          -0.60066, -0.60934, -0.61664, -0.62258, -0.62719, -0.63048, -0.63244, -0.6331, -0.62441, -0.61562, -0.60673, -0.59772, -0.58859,
          -0.57934, -0.56995, -0.56043, -0.55077, -0.54095]
    LKP= [1.0843, 1.1033, 1.1219, 1.1403, 1.1585, 1.1764, 1.194, 1.2115, 1.2287, 1.2457, 1.2444, 1.2405, 1.2341, 1.2251, 1.2134, 1.1991,
          1.1821, 1.1624, 1.1397, 1.1142, 1.1142, 1.1142, 1.1142, 1.1142, 1.1142, 1.1142, 1.1142, 1.1142, 1.1142, 1.1142, 1.1746, 1.216,
          1.2395, 1.2455, 1.2341, 1.2052, 1.1581, 1.0915, 1.0033, 0.88871, 1.0533, 1.1718, 1.2566, 1.3135, 1.345, 1.3525, 1.3354, 1.2925,
          1.2206, 1.1142, 1.1397, 1.1624, 1.1821, 1.1991, 1.2134, 1.2251, 1.2341, 1.2405, 1.2444, 1.2457, 1.2287, 1.2115, 1.194, 1.1764,
          1.1585, 1.1403, 1.1219, 1.1033, 1.0843, 1.0651]
    LAP= [-0.53355, -0.54284, -0.55199, -0.56101, -0.56989, -0.57865, -0.5873, -0.59583, -0.60425, -0.61257, -0.61194, -0.61006, -0.60691,
          -0.6025, -0.5968, -0.5898, -0.58147, -0.57179, -0.56071, -0.54819, -0.54819, -0.54819, -0.54819, -0.54819, -0.54819, -0.54819,
          -0.54819, -0.54819, -0.54819, -0.54819, -0.57776, -0.59804, -0.60953, -0.61247, -0.60691, -0.59276, -0.56969, -0.53709, -0.49379,
          -0.43755, -0.51833, -0.57643, -0.61794, -0.64571, -0.66114, -0.66476, -0.65644, -0.63545, -0.60028, -0.54819, -0.56071, -0.57179,
          -0.58147, -0.5898, -0.5968, -0.6025, -0.60691, -0.61006, -0.61194, -0.61257, -0.60425, -0.59583, -0.5873, -0.57865, -0.56989,
          -0.56101, -0.55199, -0.54284, -0.53355, -0.5241]
    LAR= [-1.5496e-17, 2.3308e-17, -2.3935e-17, 2.9279e-17, 2.9094e-17, -2.082e-17, -2.9508e-18, -9.8384e-18, -9.5173e-18, -6.4006e-18,
          0.030329, 0.060602, 0.090764, 0.12076, 0.15054, 0.18006, 0.20926, 0.2381, 0.26654, 0.29455, 0.29455, 0.29455, 0.29455, 0.29455,
          0.29455, 0.29455, 0.29455, 0.29455, 0.29455, 0.29455, 0.22084, 0.14461, 0.066645, -0.012135, -0.090764, -0.16829, -0.24382,
          -0.31663, -0.38612, -0.45191, -0.45444, -0.45304, -0.44727, -0.4369, -0.42191, -0.40254, -0.37932, -0.35297, -0.32439, -0.29455,
          -0.26654, -0.2381, -0.20926, -0.18006, -0.15054, -0.12076, -0.090764, -0.060602, -0.030329, -1.2439e-15, 6.1212e-18, 5.6083e-18,
          1.2481e-18, 1.0765e-18, -1.3742e-17, -1.3368e-17, 1.3347e-17, -1.9576e-17, 1.9938e-17, 8.4309e-18]
    n=len(LHR)
    angleLists_right  = [LHYP[0:n],LHP[0:n],LHR[0:n],LKP[0:n],LAR[0:n],LAP[0:n],RHYP[0:n],RHP[0:n],RHR[0:n],RKP[0:n],RAR[0:n],RAP[0:n]]

    # 另外设定在行走过程中为进行稳定的，从弯曲到直立的状态
    RHYP=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
    RHR= [-0.077163, -0.068597, -0.06006, -0.051517, -0.042953, -0.034377, -0.025796, -0.017203, -0.0086094, 1.8531e-10, ]
    RHP= [-0.54767, -0.5492, -0.55054, -0.55171, -0.55269, -0.55349, -0.55408, -0.55455, -0.55484, -0.55492, ]
    RKP= [1.0871, 1.0902, 1.0928, 1.0951, 1.097, 1.0986, 1.0998, 1.1007, 1.1012, 1.1014, ]
    RAP= [-0.55693, -0.55841, -0.55971, -0.56084, -0.56179, -0.56256, -0.56314, -0.56359, -0.56386, -0.56395, ]
    RAR= [0.092595, 0.082316, 0.072072, 0.06182, 0.051543, 0.041252, 0.030955, 0.020644, 0.010331, -2.2237e-10, ]
    LHYP=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ]
    LHR= [0.077135, 0.068579, 0.060044, 0.051504, 0.042938, 0.034363, 0.025782, 0.017195, 0.0086091, 6.8917e-10, ]
    LHP= [-0.55228, -0.55383, -0.55517, -0.55634, -0.55733, -0.55813, -0.55875, -0.55921, -0.55948, -0.55957, ]
    LKP= [1.0873, 1.0903, 1.093, 1.0953, 1.0972, 1.0988, 1.1, 1.1009, 1.1014, 1.1016, ]
    LAP= [-0.55246, -0.55394, -0.55524, -0.55636, -0.55731, -0.55809, -0.55868, -0.55912, -0.55938, -0.55947, ]
    LAR= [-0.092562, -0.082295, -0.072053, -0.061804, -0.051525, -0.041235, -0.030939, -0.020634, -0.010331, -8.27e-10, ]
    n=len(LHR)
    angleLists_st  = [LHYP[0:n],LHP[0:n],LHR[0:n],LKP[0:n],LAR[0:n],LAP[0:n],RHYP[0:n],RHP[0:n],RHR[0:n],RKP[0:n],RAR[0:n],RAP[0:n]]

    motionProxy.angleInterpolation(names, angleLists_zero, timeLists_one, isAbsolute)
    # 腿部进行标准站立
    timeLists = [[20*((i)*0.015+0.1) for i in range(len(angleLists_Leg_s[1]))] for j in range(len(angleLists_Leg_s))]
    motionProxy.angleInterpolation(names, angleLists_Leg_s, timeLists, isAbsolute)         
    # 头部也需要进行调整
    timeLists = [[20*((i)*0.015+0.1) for i in range(len(angleLists_Head_s[1]))] for j in range(len(angleLists_Head_s))]
    motionProxy.angleInterpolation(names_Head, angleLists_Head_s, timeLists, isAbsolute)       
    
    #[X,Y]=FindBall(robotIP)
    #调用视觉的模块，确定将要放置小球的位置，因为在其中是要选取黄色部分半径最大的圆
    #机器人将走向放有小球的目标处
    #但是在试验中由于小球距离远，机器人的摄像头出现了问题，一直都没有办法定位准，所以只能我们人为指定坐标
    X = 40
    Y =-20
    print [X,Y]


    if(Y>0):
        #向左进行平移微调，每次想左移动一步
        timeLists = [[15*((i)*0.015+0.1) for i in range(len(angleLists_left[1]))] for j in range(len(angleLists_left))]
        for number in range(int(round(Y/3.3))):
            motionProxy.angleInterpolation(names, angleLists_left, timeLists, isAbsolute)
    elif(Y<0):
        #向右移微调，每次向右移动一步
        timeLists = [[15*((i)*0.015+0.1) for i in range(len(angleLists_right[1]))] for j in range(len(angleLists_right))]
        for number  in range(int(round(-Y/3.53))):
            motionProxy.angleInterpolation(names, angleLists_right, timeLists, isAbsolute)
            
    #微调初始步态
    timeLists = [[20*((i)*0.015+0.1) for i in range(len(angleLists_walkstart[1]))] for j in range(len(angleLists_walkstart))]
    motionProxy.angleInterpolation(names, angleLists_walkstart, timeLists, isAbsolute)
    #在x的方向上进行前进移动
    timeLists = [[20*((i)*0.015+0.1) for i in range(len(angleLists_walk[1]))] for j in range(len(angleLists_walk))]
    for number  in range(int(round(X/10.5))): 
        motionProxy.angleInterpolation(names, angleLists_walk, timeLists, isAbsolute)

    #到达指定的地点之后，将小球投进去
    releaseIt()






